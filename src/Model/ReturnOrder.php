<?php
/**
 * ReturnOrder
 *
 * PHP version 8.1
 *
 * @package  Dhl\Rest\Retoure
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Parcel DE Returns API
 *
 * # Introduction ## Overview                  Note:   This is the specification of the DP-DHL Group Parcel DE Returns API. This web service allows business customers to create return labels on demand.  # Scenarios ## Main Scenario: Creating a returnlabel This is achieved by posting a return order to the URI '/rest/orders'. The service will respond with a return label. ## Querying to get receiver locations The single scenario supported by this service is the determination of the receiver's location. This is achieved by getting a location to the URI '/rest/locations'. The service will respond with a Receiver. # Technical Note on Authorization This API supports __two alternative ways__ to authorize yourself: 1. Combination of Apikey and Basic Authentication which you can provide with every call. 2. OAuth2 Password Flow: After having obtained your access token once, you provide this token as bearer token.   You can try it out here. More details can be found when clicking on \"Authorize\".
 *
 * The version of the OpenAPI document: 1.0.8
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dhl\Rest\Retoure\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Dhl\Rest\Retoure\ObjectSerializer;

/**
 * ReturnOrder Class Doc Comment
 *
 * @package  Dhl\Rest\Retoure
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ReturnOrder implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ReturnOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'receiver_id' => 'string',
        'customer_reference' => 'string',
        'shipment_reference' => 'string',
        'creation_software' => 'string',
        'shipper' => '\Dhl\Rest\Retoure\Model\ContactAddress',
        'item_weight' => '\Dhl\Rest\Retoure\Model\Weight',
        'item_value' => '\Dhl\Rest\Retoure\Model\Value',
        'customs_details' => '\Dhl\Rest\Retoure\Model\CustomsDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'receiver_id' => null,
        'customer_reference' => null,
        'shipment_reference' => null,
        'creation_software' => null,
        'shipper' => null,
        'item_weight' => null,
        'item_value' => null,
        'customs_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'receiver_id' => false,
        'customer_reference' => false,
        'shipment_reference' => false,
        'creation_software' => false,
        'shipper' => false,
        'item_weight' => false,
        'item_value' => false,
        'customs_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'receiver_id' => 'receiverId',
        'customer_reference' => 'customerReference',
        'shipment_reference' => 'shipmentReference',
        'creation_software' => 'creationSoftware',
        'shipper' => 'shipper',
        'item_weight' => 'itemWeight',
        'item_value' => 'itemValue',
        'customs_details' => 'customsDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'receiver_id' => 'setReceiverId',
        'customer_reference' => 'setCustomerReference',
        'shipment_reference' => 'setShipmentReference',
        'creation_software' => 'setCreationSoftware',
        'shipper' => 'setShipper',
        'item_weight' => 'setItemWeight',
        'item_value' => 'setItemValue',
        'customs_details' => 'setCustomsDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'receiver_id' => 'getReceiverId',
        'customer_reference' => 'getCustomerReference',
        'shipment_reference' => 'getShipmentReference',
        'creation_software' => 'getCreationSoftware',
        'shipper' => 'getShipper',
        'item_weight' => 'getItemWeight',
        'item_value' => 'getItemValue',
        'customs_details' => 'getCustomsDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('receiver_id', $data ?? [], null);
        $this->setIfExists('customer_reference', $data ?? [], null);
        $this->setIfExists('shipment_reference', $data ?? [], null);
        $this->setIfExists('creation_software', $data ?? [], null);
        $this->setIfExists('shipper', $data ?? [], null);
        $this->setIfExists('item_weight', $data ?? [], null);
        $this->setIfExists('item_value', $data ?? [], null);
        $this->setIfExists('customs_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['receiver_id'] === null) {
            $invalidProperties[] = "'receiver_id' can't be null";
        }
        if ((mb_strlen($this->container['receiver_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'receiver_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['customer_reference']) && (mb_strlen($this->container['customer_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'customer_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['customer_reference']) && (mb_strlen($this->container['customer_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipment_reference']) && (mb_strlen($this->container['shipment_reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'shipment_reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['shipment_reference']) && (mb_strlen($this->container['shipment_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'shipment_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['creation_software']) && (mb_strlen($this->container['creation_software']) > 35)) {
            $invalidProperties[] = "invalid value for 'creation_software', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['creation_software']) && (mb_strlen($this->container['creation_software']) < 0)) {
            $invalidProperties[] = "invalid value for 'creation_software', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['shipper'] === null) {
            $invalidProperties[] = "'shipper' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets receiver_id
     *
     * @return string
     */
    public function getReceiverId(): string
    {
        return $this->container['receiver_id'];
    }

    /**
     * Sets receiver_id
     *
     * @param string $receiver_id the receiver id of the return shipment
     *
     * @return $this
     */
    public function setReceiverId(string $receiver_id): static
    {
        if (is_null($receiver_id)) {
            throw new InvalidArgumentException('non-nullable receiver_id cannot be null');
        }
        if ((mb_strlen($receiver_id) > 50)) {
            throw new InvalidArgumentException('invalid length for $receiver_id when calling ReturnOrder., must be smaller than or equal to 50.');
        }

        $this->container['receiver_id'] = $receiver_id;

        return $this;
    }

    /**
     * Gets customer_reference
     *
     * @return string|null
     */
    public function getCustomerReference(): ?string
    {
        return $this->container['customer_reference'];
    }

    /**
     * Sets customer_reference
     *
     * @param string|null $customer_reference The customer reference may be used to identify the original customer order. The first 30 characters are visibly printed on the returns label.
     *
     * @return $this
     */
    public function setCustomerReference(?string $customer_reference): static
    {
        if (is_null($customer_reference)) {
            throw new InvalidArgumentException('non-nullable customer_reference cannot be null');
        }
        if ((mb_strlen($customer_reference) > 50)) {
            throw new InvalidArgumentException('invalid length for $customer_reference when calling ReturnOrder., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($customer_reference) < 0)) {
            throw new InvalidArgumentException('invalid length for $customer_reference when calling ReturnOrder., must be bigger than or equal to 0.');
        }

        $this->container['customer_reference'] = $customer_reference;

        return $this;
    }

    /**
     * Gets shipment_reference
     *
     * @return string|null
     */
    public function getShipmentReference(): ?string
    {
        return $this->container['shipment_reference'];
    }

    /**
     * Sets shipment_reference
     *
     * @param string|null $shipment_reference The shipment reference may be used to identify the returns shipment. It is not visibly printed on the returns label but only displayed in the returns overview of the Post & DHL Business Customer Portal.
     *
     * @return $this
     */
    public function setShipmentReference(?string $shipment_reference): static
    {
        if (is_null($shipment_reference)) {
            throw new InvalidArgumentException('non-nullable shipment_reference cannot be null');
        }
        if ((mb_strlen($shipment_reference) > 50)) {
            throw new InvalidArgumentException('invalid length for $shipment_reference when calling ReturnOrder., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($shipment_reference) < 0)) {
            throw new InvalidArgumentException('invalid length for $shipment_reference when calling ReturnOrder., must be bigger than or equal to 0.');
        }

        $this->container['shipment_reference'] = $shipment_reference;

        return $this;
    }

    /**
     * Gets creation_software
     *
     * @return string|null
     */
    public function getCreationSoftware(): ?string
    {
        return $this->container['creation_software'];
    }

    /**
     * Sets creation_software
     *
     * @param string|null $creation_software Is only to be indicated by DHL partners.
     *
     * @return $this
     */
    public function setCreationSoftware(?string $creation_software): static
    {
        if (is_null($creation_software)) {
            throw new InvalidArgumentException('non-nullable creation_software cannot be null');
        }
        if ((mb_strlen($creation_software) > 35)) {
            throw new InvalidArgumentException('invalid length for $creation_software when calling ReturnOrder., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($creation_software) < 0)) {
            throw new InvalidArgumentException('invalid length for $creation_software when calling ReturnOrder., must be bigger than or equal to 0.');
        }

        $this->container['creation_software'] = $creation_software;

        return $this;
    }

    /**
     * Gets shipper
     *
     * @return \Dhl\Rest\Retoure\Model\ContactAddress
     */
    public function getShipper(): \Dhl\Rest\Retoure\Model\ContactAddress
    {
        return $this->container['shipper'];
    }

    /**
     * Sets shipper
     *
     * @param \Dhl\Rest\Retoure\Model\ContactAddress $shipper shipper
     *
     * @return $this
     */
    public function setShipper(\Dhl\Rest\Retoure\Model\ContactAddress $shipper): static
    {
        if (is_null($shipper)) {
            throw new InvalidArgumentException('non-nullable shipper cannot be null');
        }
        $this->container['shipper'] = $shipper;

        return $this;
    }

    /**
     * Gets item_weight
     *
     * @return \Dhl\Rest\Retoure\Model\Weight|null
     */
    public function getItemWeight(): ?\Dhl\Rest\Retoure\Model\Weight
    {
        return $this->container['item_weight'];
    }

    /**
     * Sets item_weight
     *
     * @param \Dhl\Rest\Retoure\Model\Weight|null $item_weight item_weight
     *
     * @return $this
     */
    public function setItemWeight(?\Dhl\Rest\Retoure\Model\Weight $item_weight): static
    {
        if (is_null($item_weight)) {
            throw new InvalidArgumentException('non-nullable item_weight cannot be null');
        }
        $this->container['item_weight'] = $item_weight;

        return $this;
    }

    /**
     * Gets item_value
     *
     * @return \Dhl\Rest\Retoure\Model\Value|null
     */
    public function getItemValue(): ?\Dhl\Rest\Retoure\Model\Value
    {
        return $this->container['item_value'];
    }

    /**
     * Sets item_value
     *
     * @param \Dhl\Rest\Retoure\Model\Value|null $item_value item_value
     *
     * @return $this
     */
    public function setItemValue(?\Dhl\Rest\Retoure\Model\Value $item_value): static
    {
        if (is_null($item_value)) {
            throw new InvalidArgumentException('non-nullable item_value cannot be null');
        }
        $this->container['item_value'] = $item_value;

        return $this;
    }

    /**
     * Gets customs_details
     *
     * @return \Dhl\Rest\Retoure\Model\CustomsDetails|null
     */
    public function getCustomsDetails(): ?\Dhl\Rest\Retoure\Model\CustomsDetails
    {
        return $this->container['customs_details'];
    }

    /**
     * Sets customs_details
     *
     * @param \Dhl\Rest\Retoure\Model\CustomsDetails|null $customs_details customs_details
     *
     * @return $this
     */
    public function setCustomsDetails(?\Dhl\Rest\Retoure\Model\CustomsDetails $customs_details): static
    {
        if (is_null($customs_details)) {
            throw new InvalidArgumentException('non-nullable customs_details cannot be null');
        }
        $this->container['customs_details'] = $customs_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


