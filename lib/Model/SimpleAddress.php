<?php
/**
 * SimpleAddress
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Dhl\Rest\Retoure
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Returnlabel Service for Business Customers of DP-DHL Group
 *
 * # Introduction ## Overview    This is the specification of the DP-DHL Group Parcel Return Web Services for business customers. This web service allows business customers to create returnlabels on demand.  ## Pre-conditions    In order to access this service, a registration for the DP-DHL Group Customer Integration Gateway (\"CIG\") is required. Partners can register [here](https://entwickler.dhl.de/web/ep/anmeldung).    Apart from CIG credentials, a partner system has to identify itself and needs be authorized for this particular service. This requires another pair of credentials. Both credentials must be passed as request headers. (See \"Web service authentication\".)    The service can only be reached through HTTPS. HTTP requests are ignored (by CIG).    The web service is a REST interface that can be accessed by a number of libraries and tools for different programming languages and environments.   ## Error handling All error responses (4xx and 5xx) have the `Content-Type` header set to `application/problem+json` or `application/problem+xml`, if the requests `Content-Type` were `application/json` or `application/xml`.   The response content must also contain the HTTP return code as well as the reason for the error. For example  ``` {\"code\":\"INVALID_PRODUCT_SELECTION\",\"detail\":\"Invalid product/service combination.\"} ``` Note that the error code given here is a business-level error code, not the HTTP error code.  The most common HTTP codes to expect from this service are: >400: Bad Request. A client error that can denote a syntax or semantic error. Error details can be found in the return `Error` object. Do not repeat the request without changing it.  >401: Authentication failed. The caller provided the wrong credentials. Do not repeat the request without changing it.  >403: Authorization failed. The caller has provided the correct credentials, but hasn't got sufficient privileges to access a given resource. ## Web Service Authentication The caller needs two sets of credentials: The Gateway (CIG) authenticates users using [Basic HTTP Authentication](https://tools.ietf.org/html/rfc7617), passed as a `Authorization` request header  ``` 'Authorization: Basic <base-64 coded cigUser:cigPassword>' ``` The authentication of the partner system is given by the `DPDHL-User-Authentication-Token` header. The value uses the same syntax as that of the `Authentication`. ``` 'DPDHL-User-Authentication-Token: <base-64 coded partnerId:partnerPassword>' ```
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dhl\Rest\Retoure\Model;

use \ArrayAccess;
use \Dhl\Rest\Retoure\ObjectSerializer;

/**
 * SimpleAddress Class Doc Comment
 *
 * @category Class
 * @package  Dhl\Rest\Retoure
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SimpleAddress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SimpleAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name1' => 'string',
        'name2' => 'string',
        'name3' => 'string',
        'street_name' => 'string',
        'house_number' => 'string',
        'post_code' => 'string',
        'city' => 'string',
        'country' => '\Dhl\Rest\Retoure\Model\Country'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name1' => null,
        'name2' => null,
        'name3' => null,
        'street_name' => null,
        'house_number' => null,
        'post_code' => null,
        'city' => null,
        'country' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name1' => 'name1',
        'name2' => 'name2',
        'name3' => 'name3',
        'street_name' => 'streetName',
        'house_number' => 'houseNumber',
        'post_code' => 'postCode',
        'city' => 'city',
        'country' => 'country'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name1' => 'setName1',
        'name2' => 'setName2',
        'name3' => 'setName3',
        'street_name' => 'setStreetName',
        'house_number' => 'setHouseNumber',
        'post_code' => 'setPostCode',
        'city' => 'setCity',
        'country' => 'setCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name1' => 'getName1',
        'name2' => 'getName2',
        'name3' => 'getName3',
        'street_name' => 'getStreetName',
        'house_number' => 'getHouseNumber',
        'post_code' => 'getPostCode',
        'city' => 'getCity',
        'country' => 'getCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name1'] = $data['name1'] ?? null;
        $this->container['name2'] = $data['name2'] ?? null;
        $this->container['name3'] = $data['name3'] ?? null;
        $this->container['street_name'] = $data['street_name'] ?? null;
        $this->container['house_number'] = $data['house_number'] ?? null;
        $this->container['post_code'] = $data['post_code'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name1'] === null) {
            $invalidProperties[] = "'name1' can't be null";
        }
        if ((mb_strlen($this->container['name1']) > 35)) {
            $invalidProperties[] = "invalid value for 'name1', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['name1']) < 0)) {
            $invalidProperties[] = "invalid value for 'name1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['name2']) && (mb_strlen($this->container['name2']) > 35)) {
            $invalidProperties[] = "invalid value for 'name2', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['name2']) && (mb_strlen($this->container['name2']) < 0)) {
            $invalidProperties[] = "invalid value for 'name2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['name3']) && (mb_strlen($this->container['name3']) > 35)) {
            $invalidProperties[] = "invalid value for 'name3', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['name3']) && (mb_strlen($this->container['name3']) < 0)) {
            $invalidProperties[] = "invalid value for 'name3', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['street_name'] === null) {
            $invalidProperties[] = "'street_name' can't be null";
        }
        if ((mb_strlen($this->container['street_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'street_name', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['street_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'street_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['house_number'] === null) {
            $invalidProperties[] = "'house_number' can't be null";
        }
        if ((mb_strlen($this->container['house_number']) > 5)) {
            $invalidProperties[] = "invalid value for 'house_number', the character length must be smaller than or equal to 5.";
        }

        if ((mb_strlen($this->container['house_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'house_number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['post_code'] === null) {
            $invalidProperties[] = "'post_code' can't be null";
        }
        if ((mb_strlen($this->container['post_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'post_code', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['post_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'post_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 35)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name1
     *
     * @return string
     */
    public function getName1()
    {
        return $this->container['name1'];
    }

    /**
     * Sets name1
     *
     * @param string $name1 name1
     *
     * @return self
     */
    public function setName1($name1)
    {
        if ((mb_strlen($name1) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name1 when calling SimpleAddress., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($name1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name1 when calling SimpleAddress., must be bigger than or equal to 0.');
        }

        $this->container['name1'] = $name1;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string|null
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string|null $name2 name2
     *
     * @return self
     */
    public function setName2($name2)
    {
        if (!is_null($name2) && (mb_strlen($name2) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name2 when calling SimpleAddress., must be smaller than or equal to 35.');
        }
        if (!is_null($name2) && (mb_strlen($name2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name2 when calling SimpleAddress., must be bigger than or equal to 0.');
        }

        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets name3
     *
     * @return string|null
     */
    public function getName3()
    {
        return $this->container['name3'];
    }

    /**
     * Sets name3
     *
     * @param string|null $name3 name3
     *
     * @return self
     */
    public function setName3($name3)
    {
        if (!is_null($name3) && (mb_strlen($name3) > 35)) {
            throw new \InvalidArgumentException('invalid length for $name3 when calling SimpleAddress., must be smaller than or equal to 35.');
        }
        if (!is_null($name3) && (mb_strlen($name3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name3 when calling SimpleAddress., must be bigger than or equal to 0.');
        }

        $this->container['name3'] = $name3;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name street_name
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if ((mb_strlen($street_name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $street_name when calling SimpleAddress., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($street_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $street_name when calling SimpleAddress., must be bigger than or equal to 0.');
        }

        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string $house_number house_number
     *
     * @return self
     */
    public function setHouseNumber($house_number)
    {
        if ((mb_strlen($house_number) > 5)) {
            throw new \InvalidArgumentException('invalid length for $house_number when calling SimpleAddress., must be smaller than or equal to 5.');
        }
        if ((mb_strlen($house_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $house_number when calling SimpleAddress., must be bigger than or equal to 0.');
        }

        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string $post_code post_code
     *
     * @return self
     */
    public function setPostCode($post_code)
    {
        if ((mb_strlen($post_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $post_code when calling SimpleAddress., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($post_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $post_code when calling SimpleAddress., must be bigger than or equal to 0.');
        }

        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if ((mb_strlen($city) > 35)) {
            throw new \InvalidArgumentException('invalid length for $city when calling SimpleAddress., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling SimpleAddress., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Dhl\Rest\Retoure\Model\Country|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \Dhl\Rest\Retoure\Model\Country|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


