<?php
/**
 * CustomsDocumentPosition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Dhl\Rest\Retoure
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Returnlabel Service for Business Customers of DP-DHL Group
 *
 * # Introduction ## Overview    This is the specification of the DP-DHL Group Parcel Return Web Services for business customers. This web service allows business customers to create returnlabels on demand.  ## Pre-conditions    In order to access this service, a registration for the DP-DHL Group Customer Integration Gateway (\"CIG\") is required. Partners can register [here](https://entwickler.dhl.de/web/ep/anmeldung).    Apart from CIG credentials, a partner system has to identify itself and needs be authorized for this particular service. This requires another pair of credentials. Both credentials must be passed as request headers. (See \"Web service authentication\".)    The service can only be reached through HTTPS. HTTP requests are ignored (by CIG).    The web service is a REST interface that can be accessed by a number of libraries and tools for different programming languages and environments.   ## Error handling All error responses (4xx and 5xx) have the `Content-Type` header set to `application/problem+json` or `application/problem+xml`, if the requests `Content-Type` were `application/json` or `application/xml`.   The response content must also contain the HTTP return code as well as the reason for the error. For example  ``` {\"code\":\"INVALID_PRODUCT_SELECTION\",\"detail\":\"Invalid product/service combination.\"} ``` Note that the error code given here is a business-level error code, not the HTTP error code.  The most common HTTP codes to expect from this service are: >400: Bad Request. A client error that can denote a syntax or semantic error. Error details can be found in the return `Error` object. Do not repeat the request without changing it.  >401: Authentication failed. The caller provided the wrong credentials. Do not repeat the request without changing it.  >403: Authorization failed. The caller has provided the correct credentials, but hasn't got sufficient privileges to access a given resource. ## Web Service Authentication The caller needs two sets of credentials: The Gateway (CIG) authenticates users using [Basic HTTP Authentication](https://tools.ietf.org/html/rfc7617), passed as a `Authorization` request header  ``` 'Authorization: Basic <base-64 coded cigUser:cigPassword>' ``` The authentication of the partner system is given by the `DPDHL-User-Authentication-Token` header. The value uses the same syntax as that of the `Authentication`. ``` 'DPDHL-User-Authentication-Token: <base-64 coded partnerId:partnerPassword>' ```
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Dhl\Rest\Retoure\Model;

use \ArrayAccess;
use \Dhl\Rest\Retoure\ObjectSerializer;

/**
 * CustomsDocumentPosition Class Doc Comment
 *
 * @category Class
 * @description Represents the returned items.
 * @package  Dhl\Rest\Retoure
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomsDocumentPosition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomsDocumentPosition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'position_description' => 'string',
        'count' => 'int',
        'weight_in_grams' => 'int',
        'values' => 'float',
        'origin_country' => 'string',
        'article_reference' => 'string',
        'tarif_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'position_description' => null,
        'count' => null,
        'weight_in_grams' => null,
        'values' => null,
        'origin_country' => null,
        'article_reference' => null,
        'tarif_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'position_description' => false,
		'count' => false,
		'weight_in_grams' => false,
		'values' => false,
		'origin_country' => false,
		'article_reference' => false,
		'tarif_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'position_description' => 'positionDescription',
        'count' => 'count',
        'weight_in_grams' => 'weightInGrams',
        'values' => 'values',
        'origin_country' => 'originCountry',
        'article_reference' => 'articleReference',
        'tarif_number' => 'tarifNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'position_description' => 'setPositionDescription',
        'count' => 'setCount',
        'weight_in_grams' => 'setWeightInGrams',
        'values' => 'setValues',
        'origin_country' => 'setOriginCountry',
        'article_reference' => 'setArticleReference',
        'tarif_number' => 'setTarifNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'position_description' => 'getPositionDescription',
        'count' => 'getCount',
        'weight_in_grams' => 'getWeightInGrams',
        'values' => 'getValues',
        'origin_country' => 'getOriginCountry',
        'article_reference' => 'getArticleReference',
        'tarif_number' => 'getTarifNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('position_description', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('weight_in_grams', $data ?? [], null);
        $this->setIfExists('values', $data ?? [], null);
        $this->setIfExists('origin_country', $data ?? [], null);
        $this->setIfExists('article_reference', $data ?? [], null);
        $this->setIfExists('tarif_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['position_description'] === null) {
            $invalidProperties[] = "'position_description' can't be null";
        }
        if ((mb_strlen($this->container['position_description']) > 50)) {
            $invalidProperties[] = "invalid value for 'position_description', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['position_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'position_description', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['count'] === null) {
            $invalidProperties[] = "'count' can't be null";
        }
        if (($this->container['count'] < 0)) {
            $invalidProperties[] = "invalid value for 'count', must be bigger than or equal to 0.";
        }

        if ($this->container['weight_in_grams'] === null) {
            $invalidProperties[] = "'weight_in_grams' can't be null";
        }
        if (($this->container['weight_in_grams'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight_in_grams', must be bigger than or equal to 0.";
        }

        if ($this->container['values'] === null) {
            $invalidProperties[] = "'values' can't be null";
        }
        if (($this->container['values'] < 0)) {
            $invalidProperties[] = "invalid value for 'values', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['origin_country']) && (mb_strlen($this->container['origin_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'origin_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['origin_country']) && (mb_strlen($this->container['origin_country']) < 3)) {
            $invalidProperties[] = "invalid value for 'origin_country', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['article_reference']) && (mb_strlen($this->container['article_reference']) > 40)) {
            $invalidProperties[] = "invalid value for 'article_reference', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['article_reference']) && (mb_strlen($this->container['article_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'article_reference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tarif_number']) && (mb_strlen($this->container['tarif_number']) > 8)) {
            $invalidProperties[] = "invalid value for 'tarif_number', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['tarif_number']) && (mb_strlen($this->container['tarif_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'tarif_number', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets position_description
     *
     * @return string
     */
    public function getPositionDescription()
    {
        return $this->container['position_description'];
    }

    /**
     * Sets position_description
     *
     * @param string $position_description Description of the returend item.
     *
     * @return self
     */
    public function setPositionDescription($position_description)
    {
        if (is_null($position_description)) {
            throw new \InvalidArgumentException('non-nullable position_description cannot be null');
        }
        if ((mb_strlen($position_description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $position_description when calling CustomsDocumentPosition., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($position_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $position_description when calling CustomsDocumentPosition., must be bigger than or equal to 0.');
        }

        $this->container['position_description'] = $position_description;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count Amount of items declared per position.
     *
     * @return self
     */
    public function setCount($count)
    {
        if (is_null($count)) {
            throw new \InvalidArgumentException('non-nullable count cannot be null');
        }

        if (($count < 0)) {
            throw new \InvalidArgumentException('invalid value for $count when calling CustomsDocumentPosition., must be bigger than or equal to 0.');
        }

        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets weight_in_grams
     *
     * @return int
     */
    public function getWeightInGrams()
    {
        return $this->container['weight_in_grams'];
    }

    /**
     * Sets weight_in_grams
     *
     * @param int $weight_in_grams Weight of the returend item.
     *
     * @return self
     */
    public function setWeightInGrams($weight_in_grams)
    {
        if (is_null($weight_in_grams)) {
            throw new \InvalidArgumentException('non-nullable weight_in_grams cannot be null');
        }

        if (($weight_in_grams < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight_in_grams when calling CustomsDocumentPosition., must be bigger than or equal to 0.');
        }

        $this->container['weight_in_grams'] = $weight_in_grams;

        return $this;
    }

    /**
     * Gets values
     *
     * @return float
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param float $values Value of returned item.
     *
     * @return self
     */
    public function setValues($values)
    {
        if (is_null($values)) {
            throw new \InvalidArgumentException('non-nullable values cannot be null');
        }

        if (($values < 0)) {
            throw new \InvalidArgumentException('invalid value for $values when calling CustomsDocumentPosition., must be bigger than or equal to 0.');
        }

        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets origin_country
     *
     * @return string|null
     */
    public function getOriginCountry()
    {
        return $this->container['origin_country'];
    }

    /**
     * Sets origin_country
     *
     * @param string|null $origin_country Country the returned item was produced.
     *
     * @return self
     */
    public function setOriginCountry($origin_country)
    {
        if (is_null($origin_country)) {
            throw new \InvalidArgumentException('non-nullable origin_country cannot be null');
        }
        if ((mb_strlen($origin_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $origin_country when calling CustomsDocumentPosition., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($origin_country) < 3)) {
            throw new \InvalidArgumentException('invalid length for $origin_country when calling CustomsDocumentPosition., must be bigger than or equal to 3.');
        }

        $this->container['origin_country'] = $origin_country;

        return $this;
    }

    /**
     * Gets article_reference
     *
     * @return string|null
     */
    public function getArticleReference()
    {
        return $this->container['article_reference'];
    }

    /**
     * Sets article_reference
     *
     * @param string|null $article_reference Reference of the returned item.
     *
     * @return self
     */
    public function setArticleReference($article_reference)
    {
        if (is_null($article_reference)) {
            throw new \InvalidArgumentException('non-nullable article_reference cannot be null');
        }
        if ((mb_strlen($article_reference) > 40)) {
            throw new \InvalidArgumentException('invalid length for $article_reference when calling CustomsDocumentPosition., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($article_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $article_reference when calling CustomsDocumentPosition., must be bigger than or equal to 0.');
        }

        $this->container['article_reference'] = $article_reference;

        return $this;
    }

    /**
     * Gets tarif_number
     *
     * @return string|null
     */
    public function getTarifNumber()
    {
        return $this->container['tarif_number'];
    }

    /**
     * Sets tarif_number
     *
     * @param string|null $tarif_number Customs tariff number.
     *
     * @return self
     */
    public function setTarifNumber($tarif_number)
    {
        if (is_null($tarif_number)) {
            throw new \InvalidArgumentException('non-nullable tarif_number cannot be null');
        }
        if ((mb_strlen($tarif_number) > 8)) {
            throw new \InvalidArgumentException('invalid length for $tarif_number when calling CustomsDocumentPosition., must be smaller than or equal to 8.');
        }
        if ((mb_strlen($tarif_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $tarif_number when calling CustomsDocumentPosition., must be bigger than or equal to 0.');
        }

        $this->container['tarif_number'] = $tarif_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


